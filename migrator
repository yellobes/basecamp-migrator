#! /usr/bin/python

# Peter Novotnak :: Binarysprocket :: 2012

import oauth.oauth as oauth
import requests
import json

import difflib



# Our interface classes
class bc_JSON :
    
    username = ''
    password = ''

    def authenticate():
        pass

    def get_comments():
        pass
    def get_messages():
        pass
    def get_people():
        pass
    def get_todolists():
        pass
    def get_todos():
        pass

    def get_events():
        pass

    def get_topics(url, project_id, project_name):
        url_dict = {
            'url' : url,
            'p_id' : project_id, }
        include = [
            'comments',
            'events',
            'messages',
            'people',
            'todolists',
            'todos', ]
        auth_en = requests.auth.HTTPBasicAuth
        url = "https://basecamp.com/%(company_id)s/api/v1/projects/%(topic_id)s/topics.json" % url_dict 
        r = requests.get(url, auth_en(username, password))
        for topic in r.json:
            print topic['name']

        

class ac_ :
    pass



# Transform input to orderd data ready for output
class Mapping :
    pass

# This class walks the topics / 
class Walker :
    pass




# example client using httplib with headers
class SimpleOAuthClient(oauth.OAuthClient):

    def __init__(self, server, port=httplib.HTTP_PORT, request_token_url='', access_token_url='', authorization_url=''):
        self.server = server
        self.port = port
        self.request_token_url = request_token_url
        self.access_token_url = access_token_url
        self.authorization_url = authorization_url
        self.connection = httplib.HTTPConnection("%s:%d" % (self.server, self.port))

    def fetch_request_token(self, oauth_request):
        # via headers
        # -> OAuthToken
        self.connection.request(oauth_request.http_method, self.request_token_url, headers=oauth_request.to_header()) 
        response = self.connection.getresponse()
        return oauth.OAuthToken.from_string(response.read())

    def fetch_access_token(self, oauth_request):
        # via headers
        # -> OAuthToken
        self.connection.request(oauth_request.http_method, self.access_token_url, headers=oauth_request.to_header()) 
        response = self.connection.getresponse()
        return oauth.OAuthToken.from_string(response.read())

    def authorize_token(self, oauth_request):
        # via url
        # -> typically just some okay response
        self.connection.request(oauth_request.http_method, oauth_request.to_url()) 
        response = self.connection.getresponse()
        return response.read()

    def access_resource(self, oauth_request):
        # via post body
        # -> some protected resources
        headers = {'Content-Type' :'application/x-www-form-urlencoded'}
        self.connection.request('POST', RESOURCE_URL, body=oauth_request.to_postdata(), headers=headers)
        response = self.connection.getresponse()
        return response.read()
